name: MSBuild

on:
  push:
    branches: [ master ]
  #pull_request:
  #  branches: [ master ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: write

jobs:
  lint:
    runs-on: windows-latest
    
    steps:
    - name: RunLint
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: echo LINT
      
  test:
    runs-on: windows-latest
    needs: [build,lint]
    
    steps:
    - name: Setup VSTest.exe
      uses: Malcolmnixon/Setup-VSTest@v4
      
    - name: DownloadBinaries
      uses: actions/download-artifact@v3
      with: 
        name: my-artifact
        path: x64\Release
        
    - name: RunTests
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: VSTest.Console.exe x64\Release\UnitTest1.dll

  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}
        
    - name: uploadBinaries
      uses: actions/upload-artifact@v3
      with: 
        name: my-artifact
        path: x64\Release\    
        if-no-files-found: error
        
  SaveBinary:
    needs: [test]
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
      
    - name: DownloadBinaries
      uses: actions/download-artifact@v3
      with: 
        name: my-artifact
        path: x64\Release
        
    - name: stage
      working-directory: ${{env.GITHUB_WORKSPACE}} 
      run: copy x64\Release\PipeplinesExe.exe .
      
    - name: addEmail
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: git config --global user.email "tyagibl@mail.uc.edu"
      
    - name: addName
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: git config --global user.name "Bulbul Tyagi"
      
    - name: add
      working-directory: ${{env.GITHUB_WORKSPACE}} 
      run: git add PipeplinesExe.exe
      
    - name: commit
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: git commit -m "generated"
      
    - name: push
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: git push


